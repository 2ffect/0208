**Django React.js Application
1. Web Browers와 Web Application Server가 통신하는 방법
 1)ajax
  -  Asynchronous Javascript XML(eXtensible Markup Language)의 약자로 Javascript의 비동기 방식을 이용해 XML을 가져오는 것
최근에는 데이터 포맷에 상관없이 비동기적으로 데이터를 가져오는 기술
** 동기 : 하나의 요청이 발생하면 다른 요청은 전부 대기하고 요청을 처리할 때 까지 기다린 후 다음 요청을 처리하는 방식
   비동기 : 하나의 요청이 발생해서 처리 중이더라도 다른 요청을 동시에 처리할 수 있는 방식
비동기를 화면을 부분적으로 갱신하는 것으로 오해하는 경우가 많음 ( ajax로 이 방법을 많이 사용하기 때문)
 [1] 구현 방법
 - XMLHttpRequest 객체 생성
 - 처리 결과를 받을 이벤트 리스너 등록 (콜백을 등록한다 라고 하기도 함)
 - 서버에게 전송할 데이터(파라미터)가 있으면 데이터를 준비
 - open 메서드를 이용해 연결준비
 - send 메서드를 이용해 요청을 전송
 - 

** Event : 사용자나 운영체제등에 의해서 발생하는 동작 (클릭 등)
Listener : 이벤트를 처리하기 위한 함수나 메서드를 가진 객체 (EventHandler 라고도 함)
Callback : 어떤 이벤트가 발생했을 때 호출되는 함수나 메서드



 2) 전체 데이터 가져오기 구현
  >   urls.py 파일에 하나의 요청을 처리하기 위한 url을 등록


from apiapp import views
urlpatterns = [
    path("admin/", admin.site.urls),
    path("example/", include("apiapp.urls")),
    path("ajax/", views.ajax) # ajax/ 라는 요청이 왔을 때 apiapp.views 파일의 ajax 함수가 처리하도록 설정
]

  >  apiapp의 views.py 파일에 요청을 처리하기 위한 ajax함수를 생성

from django.shortcuts import render
# 요청이 오면 templates 디렉토리의 ajax.html 을 출력
def ajax(request):
    return render(request, "ajax.html")

  >  apiapp 디렉토리에 templates 디렉토리를 생성하고 그 안에 ajax.hteml 파일을 생성

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ajax</title>
</head>
<body>
    <script>
        // ajax 요청 객체 생성
        let request = new XMLHttpRequest();
        // 요청을 준비
        request.open('GET','../example/books/')
        // 요청 - 데이터가 없는 경우는 따움표로 대입
        request.send('')
        // 서버에서 요청이 전송되면 호출 될 콜백 메서드 등록
        request.addEventListener('load', function(e){
            // 데이터를 확인 : 텍스트와 JSON은 responesText
            // XML인 경우는 responseXML
            // JSON 문자열을 직접 출력
            alert(request.responseText);
        })
    </script>
</body>
</html>

데이터를 가져오는 URL : 127.0.0.1/example/books

ajax.html의 URL : 127.0.0.1/ajax

csv, XML, JSON, YAML은 텍스르틀 이용해서 데이터를 표현하는 방식 그 자체는 텍스트 일 뿐
위의 

  >  javascript에서 JSON데이터 사용 (파싱)
 [1] 결과 = JSON.parse(JSON 문자열) : 배열이나 객체로 변환해서 리턴
 [2] 결과 = JSON.stringify(자바스크립트 객체) : JSON 문자열로 변환해서 리턴

  > JSON.parse(JSON 문자열) : 배열이나 객체로 변환해서 리턴 하는법

              // 받아 온 문자열을 Javascript 객체로 변환
            let data = JSON.parse(request.responseText)
            
            // 자바스크립트는 for ~ in 으로 배열을 순회하면 인덱스가 리턴된다.
            for (idx in data){
                alert(data[idx].bid + data[idx].title)
            }

   >


3) 데이터 삽입 구현 - POST 방식에 데이터 전송
  -  ajax.html 파일의 스크립트만 수정해서 확인

  <script>

        // ajax 요청 객체 생성
        let request = new XMLHttpRequest();

        // POST 방식에서 전송할 데이터를 생성
        let formdata = new FormData();
        formdata.append('bid',119);
        formdata.append('title','손자병법');
        formdata.append('author','김재희');
        formdata.append('date','2024-01-29')

       // 요청을 준비하고 전송
        request.open("POST", "../example/books");


        // 데이터 변환 (GET 방식에서는 안해도 됨, PUT or POST 방식에서는 필수로 해줘야한다.)
        request.setRequestHeader("Content-type",
            "application/x-www-form-urlcencoded");
        let param = "";
        for(let pair of formdata.entries()){
            param += pari[0] + '=' + pair[1] + '&';
        }

        request.send(param);

        request.addEventListener("load", function(e){
            alert(request.response.Text);
        })
        
    </script>

5) fetch API
  >  fetch api는 프로미스 기반의 api (ajax 는 콜백 방식)
콜백 방식은 별동릐 함수를 만들어 연결하는 반면, 프로미스 기반에서는 .then 또는 .catch를 연달아 작성한다.
도큐먼트 : https://developer.mozilla.org/en-US/dpcs/Web/API/fetch


 [1] ajax.html 파일의 스크립트를 사용해 전체 데이터 가져오기 구현

    <script>
        // 첫번째 then에서는 어떤 데이터인지 알려주면 파싱을 해 다음 then에게 넘겨준다.
        // 다음 then에서 data를 사용하면 된다.
        // 여러개의 문장을 수행할 경우 { } 사용
        // 예외 처리는 catch로 수행하며 chatc의 매개변수는 예외 객체
        fetch('../example/books/')
        .then((response) => response.json())
        .then((data) => console.log(data))

        // 예외 처리
        .catch((error) => console.log(error));
        
    </script>


6) axios 라이브러리
  -  Promise 기반 HTTP 클라이언트 기반의 비동기 데이터 요청을 위한 라이브러리
동일한 코드로 node.js 기반의 서버와 클라이언트에서 동일한 기능을 수행할 수 있다.
도큐먼트 : https://axios-http.com/kr/docs/intro

최근에 많이 사용된다.
  >  스크립트 수정
    <!-- axios 라이브러를 사용하기 위한 링크 설정 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        axios.get('../example/books/')
        .then((response) =>console.log(data))
        // 예외 처리
        .catch((error) => console.log(error));
        
    </script>

일반적으로 ajax보다는 fetch api가 fetch api 보다는 axios 라이브러리를 사용하는 것이 코드가 간결하다 하지만 axios는 표준 기술이 아니기 때문에 외부의 영향을 받게 된다.


7) Web Socket
  -  ajax나 fetch api는 무상태 방식이며 연결을 유지하지 않는다.
ajax나 fetch api를 이용해선 채팅과 같은 계속하여 데이터를 주고받는 서비스 구현이 어렵다. 채팅을 구현하게 된다면 오버헤드가 너무 크다.

8) Web Push
  -  클라이언트의 요청이 없어도 서버가 클라이언트에게 데이터를 전송하는 것
예전에는 ajax polling을 통해 구현했지만 요즘은 Web Push(Server Side Event)를 통해 구현한다. 부인 봉쇄를 위해서 구현하는 경우가 있다. 모바일의 경우 APNS(Apple Push Notification Service) 나 FCM(Firebase Cloud Messaging)이 UDP로 구현되어 있기 때문에 부인봉쇄에 사용할 수 없다.

** 부인봉쇄(Non-repudiation) : 송신자가 수신자에게 보낸 정보를 자신이 보내지 않았다고 '부인'하는 것을 막아버리는 것

9) CSRF(Cross-Site Request Forgery)
  -  사용자가 의도하지 않은 공격을 시도하는 행위 
토큰을 발급해 토큰이 있는 사용자만 서버에게 요청할 수 있도록 하여 막을 수 있다.
Django의 경우 클라이언트를 외부에서 만들 때 CSRF설정을 필수로 요구한다. (내부는 안해도 된다)

























GET : 조회에 이용
데이터를 URL 뒤에 삽입해서 전송 : URL?이름=값&이름=값... 방식
값의 길이에 제한이 있다.
데이터가 외부로 노출되기 때문에 보안성이 떨어진다.
자동 재전송이 가능하다
인코딩을 Web Server가 수행한다.
파라미터를 전송할 때 인코딩을해서 전송해야 한다.
서버 랜더링을 하는 경우 대부분 forwarding을 수행


POST, PUT, DELETE : 삽입(등록),  갱신(수정), 삭제에 이용
데이터를 헤더에 포함시켜 전송
값의 길이에 제한이 없다.
데이터가 외부로 노출되지 않는다.
인코딩을 Application Server가 수행한다.

서버 랜더링을 하는 경우 대부분 redirect를 수행